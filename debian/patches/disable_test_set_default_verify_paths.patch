Description: disable test_set_default_verify_paths since it tries to access the web

Index: pyopenssl-0.13~a1/OpenSSL/test/test_ssl.py
===================================================================
--- pyopenssl-0.13~a1.orig/OpenSSL/test/test_ssl.py	2011-08-15 18:23:31.612351434 +0200
+++ pyopenssl-0.13~a1/OpenSSL/test/test_ssl.py	2011-08-15 18:24:44.646743564 +0200
@@ -661,21 +661,22 @@
             # internet which has such a certificate.  Connecting to the network
             # in a unit test is bad, but it's the only way I can think of to
             # really test this. -exarkun
+            pass
 
             # Arg, verisign.com doesn't speak TLSv1
-            context = Context(SSLv3_METHOD)
-            context.set_default_verify_paths()
-            context.set_verify(
-                VERIFY_PEER,
-                lambda conn, cert, errno, depth, preverify_ok: preverify_ok)
-
-            client = socket()
-            client.connect(('verisign.com', 443))
-            clientSSL = Connection(context, client)
-            clientSSL.set_connect_state()
-            clientSSL.do_handshake()
-            clientSSL.send('GET / HTTP/1.0\r\n\r\n')
-            self.assertTrue(clientSSL.recv(1024))
+            #context = Context(SSLv3_METHOD)
+            #context.set_default_verify_paths()
+            #context.set_verify(
+            #    VERIFY_PEER,
+            #    lambda conn, cert, errno, depth, preverify_ok: preverify_ok)
+            #
+            #client = socket()
+            #client.connect(('verisign.com', 443))
+            #clientSSL = Connection(context, client)
+            #clientSSL.set_connect_state()
+            #clientSSL.do_handshake()
+            #clientSSL.send('GET / HTTP/1.0\r\n\r\n')
+            #self.assertTrue(clientSSL.recv(1024))
 
 
     def test_set_default_verify_paths_signature(self):
